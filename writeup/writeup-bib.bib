
@article{local_mark_scan,
	title = {Cyclic reference counting with local mark-scan},
	volume = {34},
	issn = {0020-0190},
	url = {https://www.sciencedirect.com/science/article/pii/002001909090226N},
	doi = {10.1016/0020-0190(90)90226-N},
	number = {1},
	urldate = {2024-09-15},
	journal = {Information Processing Letters},
	author = {Martínez, Alejandro D. and Wachenchauzer, Rosita and Lins, Rafael D.},
	month = feb,
	year = {1990},
	keywords = {garbage collection, reference counting, analysis of algorithms, Compilers, functional programming},
	pages = {31--35},
	file = {PDF:C\:\\Users\\yasht\\Zotero\\storage\\KF6EMQ3M\\Martínez et al. - 1990 - Cyclic reference counting with local mark-scan.pdf:application/pdf;ScienceDirect Snapshot:C\:\\Users\\yasht\\Zotero\\storage\\MGH39B3R\\002001909090226N.html:text/html},
}


@article{lazy_mark_scan,
	title = {Cyclic {Reference} {Counting} {With} {Lazy} {Mark}-{Scan}},
	volume = {44},
	issn = {0020-0190},
	url = {http://dx.doi.org/10.1016/0020-0190(92)90088-D},
	abstract = {this paper is much higher than the original one for cyclic reference counting with local mark-scan. More shared cells will now be claimed directly, without any need for mark-scan. The deletion of the last pointer to a shared cell will recycle it immediately, regardless of whether there is a reference to it on the queue. The queue will be left basically with pointers to cycles and pointers to green cells in the free-list or recycled. In this case again, our algorithm performs far better than the original one. In the best case, only one local mark-scan will be performed per cycle, instead of as many as the number of external references to a cycle, as before.},
	language = {en},
	number = {4},
	urldate = {2024-09-18},
	journal = {Information Processing Letters},
	author = {Lins, Rafael D.},
	month = dec,
	year = {1992},
	note = {Number: 4
Publisher: Elsevier Science Bv, Po Box 211, 1000 Ae Amsterdam, Netherlands},
	pages = {215--220},
	file = {Full Text PDF:C\:\\Users\\yasht\\Zotero\\storage\\DVE2LKA5\\Lins - 1992 - Cyclic Reference Counting With Lazy Mark-Scan.pdf:application/pdf;Snapshot:C\:\\Users\\yasht\\Zotero\\storage\\CDRGRICK\\22347.html:text/html},
}

@article{morris_chang_cyclic_2012,
	series = {{SMALLTALKS} 2010},
	title = {Cyclic reference counting by typed reference fields},
	volume = {38},
	issn = {1477-8424},
	url = {https://www.sciencedirect.com/science/article/pii/S1477842411000285},
	doi = {10.1016/j.cl.2011.09.001},
	abstract = {Reference counting strategy is a natural choice for real-time garbage collection, but the cycle collection phase which is required to ensure the correctness for reference counting algorithms can introduce heavy scanning overheads. This degrades the efficiency and inflates the pause time required for garbage collection. In this paper, we present two schemes to improve the efficiency of reference counting algorithms. First, in order to make better use of the semantics of a given program, we introduce a novel classification model to predict the behavior of objects precisely. Second, in order to reduce the scanning overheads, we propose an enhancement for cyclic reference counting algorithms by utilizing strongly-typed reference features of the Java language. We implement our proposed algorithm in Jikes RVM and measure the performance over various Java benchmarks. Our results show that the number of scanned objects can be reduced by an average of 37.9\% during cycle collection phase.},
	number = {1},
	urldate = {2024-09-13},
	journal = {Computer Languages, Systems \& Structures},
	author = {Morris Chang, J. and Chen, Wei-Mei and Griffin, Paul A. and Cheng, Ho-Yuan},
	month = apr,
	year = {2012},
	keywords = {reference counting, Garbage collection, Java, Memory management},
	pages = {98--107},
	file = {PDF:C\:\\Users\\yasht\\Zotero\\storage\\IFPWL334\\Morris Chang et al. - 2012 - Cyclic reference counting by typed reference fields.pdf:application/pdf;ScienceDirect Snapshot:C\:\\Users\\yasht\\Zotero\\storage\\FHPHZGUW\\S1477842411000285.html:text/html},
}
