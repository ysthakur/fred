data Player
  = Player { store: Store }
  // This exists only to make the compiler think that Player can be involved in cycles
  | PlayerCyclic {
    // With the --all-sccs-bad flag enabled, this would make the compiler think there could be a cycle
    player: Player
  }

// Represents some shared data that all Player objects have a reference to
data Store = Store { datums: Data }

data Data
  = DataCons {
    value: int,
    // This would need to be mut for the compiler to think there could be a cycle at runtime
    next: Data
  }
  | DataNil {}

fn createDummyData(length: int): Data =
  if length == 0 then DataNil {}
  else DataCons { value: length, next: createDummyData(length - 1) }

fn createAndDeletePlayers(n: int, store: Store): int =
  if n == 0 then 0
  else
    let player = Player { store: store } in
    // This decrements the refcount and adds player to the list of PCRs
    (let playerExtra = player in 0);
    // With lazy mark scan only, this will cause all the Data objects to be scanned too
    c("processAllPCRs();");
    createAndDeletePlayers(n - 1, store)

fn pointlessLoop(iters: int, store: Store): int =
  if iters == 0 then 0
  else
    createAndDeletePlayers(10, store);
    c("processAllPCRs();");
    pointlessLoop(iters - 1, store)

fn run(): int =
  let store = Store { datums: createDummyData(1000) } in
  pointlessLoop(50000, store);
  c("processAllPCRs();")

fn main(): int =
  printf("Starting game benchmark\n");
  c("float clockStart = (float) clock()/CLOCKS_PER_SEC;");
  c("u_int64_t tscStart = rdtscp();");
  run();
  c("printf(
      \"Time stamp counter diff: %ld, clock diff: %lf\",
      rdtscp() - tscStart,
      ((float) clock()/CLOCKS_PER_SEC) - clockStart);")
